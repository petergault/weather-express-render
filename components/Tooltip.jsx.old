/**
 * Tooltip Component
 * 
 * This component provides contextual help and information through tooltips.
 * It can be used to explain complex features or provide additional context.
 */

// Simulate React hooks
const { useState, useRef, useEffect, memo } = React;

/**
 * Tooltip component
 * @param {Object} props - Component props
 * @param {React.ReactNode} props.children - The element that triggers the tooltip
 * @param {string} props.content - The tooltip content
 * @param {string} props.position - Tooltip position ('top', 'bottom', 'left', 'right')
 * @param {string} props.id - Unique ID for accessibility
 * @returns {JSX.Element} - Rendered component
 */
const Tooltip = memo(({ 
  children, 
  content, 
  position = 'top', 
  id = `tooltip-${Math.random().toString(36).substr(2, 9)}` 
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const tooltipRef = useRef(null);
  const triggerRef = useRef(null);
  
  // Show tooltip
  const showTooltip = () => {
    setIsVisible(true);
  };
  
  // Hide tooltip
  const hideTooltip = () => {
    setIsVisible(false);
  };
  
  // Handle click outside to close tooltip
  useEffect(() => {
    if (!isVisible) return;
    
    const handleClickOutside = (event) => {
      if (tooltipRef.current && !tooltipRef.current.contains(event.target) &&
          triggerRef.current && !triggerRef.current.contains(event.target)) {
        hideTooltip();
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isVisible]);
  
  // Handle escape key to close tooltip
  useEffect(() => {
    if (!isVisible) return;
    
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        hideTooltip();
      }
    };
    
    document.addEventListener('keydown', handleEscKey);
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [isVisible]);
  
  // Position the tooltip
  useEffect(() => {
    if (!isVisible || !tooltipRef.current || !triggerRef.current) return;
    
    const tooltip = tooltipRef.current;
    const trigger = triggerRef.current;
    const triggerRect = trigger.getBoundingClientRect();
    const tooltipRect = tooltip.getBoundingClientRect();
    
    let top, left;
    
    switch (position) {
      case 'top':
        top = triggerRect.top - tooltipRect.height - 10;
        left = triggerRect.left + (triggerRect.width / 2) - (tooltipRect.width / 2);
        break;
      case 'bottom':
        top = triggerRect.bottom + 10;
        left = triggerRect.left + (triggerRect.width / 2) - (tooltipRect.width / 2);
        break;
      case 'left':
        top = triggerRect.top + (triggerRect.height / 2) - (tooltipRect.height / 2);
        left = triggerRect.left - tooltipRect.width - 10;
        break;
      case 'right':
        top = triggerRect.top + (triggerRect.height / 2) - (tooltipRect.height / 2);
        left = triggerRect.right + 10;
        break;
      default:
        top = triggerRect.top - tooltipRect.height - 10;
        left = triggerRect.left + (triggerRect.width / 2) - (tooltipRect.width / 2);
    }
    
    // Ensure tooltip stays within viewport
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    
    // Adjust horizontal position if needed
    if (left < 10) {
      left = 10;
    } else if (left + tooltipRect.width > viewportWidth - 10) {
      left = viewportWidth - tooltipRect.width - 10;
    }
    
    // Adjust vertical position if needed
    if (top < 10) {
      top = 10;
    } else if (top + tooltipRect.height > viewportHeight - 10) {
      top = viewportHeight - tooltipRect.height - 10;
    }
    
    // Apply position
    tooltip.style.top = `${top}px`;
    tooltip.style.left = `${left}px`;
  }, [isVisible, position]);
  
  return (
    <>
      <div 
        className="tooltip-trigger" 
        ref={triggerRef}
        onMouseEnter={showTooltip}
        onMouseLeave={hideTooltip}
        onClick={showTooltip}
        onFocus={showTooltip}
        onBlur={hideTooltip}
        aria-describedby={id}
      >
        {children}
      </div>
      
      {isVisible && (
        <div 
          id={id}
          ref={tooltipRef}
          className={`tooltip-content tooltip-${position}`}
          role="tooltip"
        >
          <div className="tooltip-arrow"></div>
          <div
            className="tooltip-inner"
            dangerouslySetInnerHTML={{ __html: content }}
          />
        </div>
      )}
    </>
  );
});

// Set display name for debugging
Tooltip.displayName = 'Tooltip';

// Export the component
window.Tooltip = Tooltip;